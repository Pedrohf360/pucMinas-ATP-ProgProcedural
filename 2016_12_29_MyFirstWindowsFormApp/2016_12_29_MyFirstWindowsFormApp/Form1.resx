<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEACABoBQAAJgAAACAgAAABAAgAqAgAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAAAB
        AADDDgAAww4AAAABAAAAAQAAA/7+AAP/+AAC/v4AAP7/ABT//AAgq6oAHeXlAAv//wAd4+0ASa7BACzk
        8AAI//8AAP38AAL/+gAB/f4AAv7/AAL9/wAG/f8ABf3/AAD8/QAT//8AIrGsAB11bgAb//8ADPb4AEa4
        ywArpMMAIe/1AA7//wAE/P0AA/3+AAH+/QAD/v8ABPz/AAH8/gAM//8AGdfmACKvxQAh9/cAE/bwABn/
        /wAY3+wAHICbABvi6AAC//8ABfz+AAH+/gAB//8ABf/9AAf//AAE/v0ABf//AAnj6AA6ydcANKKvACGA
        iAAf8fIAJNneAB6rvQAizdEAB///AAf8/QAF/v4AAP37AAD8+gAA+/sAAP//AAjh2QAseXQAP4WhAA84
        ZQBHsMUAIlxUABq6vQAP//8AAPn3AAD8/AAG+v0AAP7+AA3+/gAd//8AGP39AD3//wA1hoEAFDNFADRJ
        WgAsV1kAKod8ABL9/QAK/f8AIM/OAC6UegAwmowAKKadADicigA1aVgANDYeADMwKwARGBIANYF3ADGd
        lQAsoZYAKaCUACaVfQAf19IAF///ACyilgBALgEAMCEGABoaAABMPAwAPzoiAIpmKQBTMw4AUDUVADwy
        EgA/Mg8AQCkAAEdCGwBFWzgAKYBwABj8/QAkeWgAMzgbAEVZRAA7ZFEAVlgxACc4IwBDWTcANT8kAEVJ
        HQBBSScARU85AExRLQBSVjAAM1E2ACjEvAAI+voAHd7cACTr5gAv//8ALrazAECgmQA98/UAJOfpACjb
        3wA76+QANca7ACbGwwAs9/EAKuzjACPp3wAR//8AAv78AAb//gAktK4ADBsOAEWrnABr/PYAY///AD/B
        vAASOy8AKbWwAAT//wAB+/4ABvz+AAH9/QAB/fsABv/9AET49ABhX0AAYk8qAJycdQCUm3AAREUYAG19
        WQBB/vcAAfz8AAH++gAD/P4AC/3+AAL8/wAE/f8AAfn9ACaglgAkHhkAPycjAGJULQBpaz4ASXVXACZr
        WgAk4t8AAP39AAX//AAA//4AA/79AAD5/QA/k5QAJzpFACE0OQCBh38Af6GZACtpeAAkYnIAHbi7AAD8
        /gAB/v8AAf/+AAT/+AAA/foAJv//AGaagwAcFAcAfHtzAIqIhgCDjYIAOVI+ACRWQgA96eUAB//+AAD/
        /QAB//wABf3+ACb58gBKXCoAMSILADYxKABBNyEAV005AFBDJwBYZDQAU+LSAP///wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMLezt/g4eLj5OXm50rNEs/P0NHS09TV1tfY2drb3A/dwsPEKMXG
        x8jJysvMmM3OwrW2t5i4ubq7vL2+vwvAtsGlpqeoqaqrrK2ur7CxsrO0mZoTSpucnZ6foKGiSkGjpImK
        i4yNjo+QkZKTlJWWl5h5ent8fX5/gIGCg4SFhoeIaWprbG1ub3BxcnN0dXZ3eCNaW1xdXl9gYWJjZGVm
        Z2hOT1AXUVJTVFVWV1JYKBdZLz9AQUJDREVGR0hJSktMTS8wMTIzNDU2Nzg5Ojs8PT4PICEiIyQlJico
        KSorLC0uEBESExQVFhcYGRobHB0eHwABAgMEBQYHCAkKCwwNDg8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAIAAAA
        AAAABAAAww4AAMMOAAAAAQAAAAEAAAL+/gAC/vYAC/39ACT+9AAFqLgAOebnABv7+wAd9/4ALunqAE6y
        yQBz1+YAQO//AAL3/wAb+/YAPeXeAAQ5PQAa5OQAJPv8ABT8/QAVxtUAOq6vACmSpQAXscwAI/P8AABM
        QgAAPjMAZvbyACn39QA3scoAMMLgABb59wBH7OkAAEk8ADP7+gA63+IACIekAD719AAS9/wAK/T9AAB4
        jwAs+/wAD73OAAdCWABY7f8AM/X9AAUxVgBH2ecABlNsAAB6dwAAnbYAACgxAACKlQBs6vkARYWRABVt
        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
</value>
  </data>
</root>